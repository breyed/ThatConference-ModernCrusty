// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace CrustyBike.Messages {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class DeviceMessages {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_CrustyBike_Messages_MessageFromDevice__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CrustyBike.Messages.MessageFromDevice, global::CrustyBike.Messages.MessageFromDevice.Builder> internal__static_CrustyBike_Messages_MessageFromDevice__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CrustyBike_Messages_MessageToDevice__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CrustyBike.Messages.MessageToDevice, global::CrustyBike.Messages.MessageToDevice.Builder> internal__static_CrustyBike_Messages_MessageToDevice__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CrustyBike_Messages_PartCategory__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CrustyBike.Messages.PartCategory, global::CrustyBike.Messages.PartCategory.Builder> internal__static_CrustyBike_Messages_PartCategory__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CrustyBike_Messages_Part__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CrustyBike.Messages.Part, global::CrustyBike.Messages.Part.Builder> internal__static_CrustyBike_Messages_Part__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static DeviceMessages() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChREZXZpY2VNZXNzYWdlcy5wcm90bxITQ3J1c3R5QmlrZS5NZXNzYWdlcyJH", 
            "ChFNZXNzYWdlRnJvbURldmljZRIXCg9yZWdpc3RyYXRpb25faWQYASABKAkS", 
            "GQoRcHVyY2hhc2VfcGFydF9pZHMYAiADKAUiTQoPTWVzc2FnZVRvRGV2aWNl", 
            "EjoKD3BhcnRfY2F0ZWdvcmllcxgBIAMoCzIhLkNydXN0eUJpa2UuTWVzc2Fn", 
            "ZXMuUGFydENhdGVnb3J5IkYKDFBhcnRDYXRlZ29yeRIMCgRuYW1lGAEgAigJ", 
            "EigKBXBhcnRzGAIgAygLMhkuQ3J1c3R5QmlrZS5NZXNzYWdlcy5QYXJ0IksK", 
            "BFBhcnQSCgoCaWQYASACKAUSDAoEbmFtZRgCIAIoCRITCgtkZXNjcmlwdGlv", 
            "bhgDIAEoCRIUCgxpc19hdmFpbGFibGUYBCABKAhCIwohY29tLmNydXN0eWJp", 
          "Y3ljbGV3b3Jrcy5jcnVzdHliaWtl"));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_CrustyBike_Messages_MessageFromDevice__Descriptor = Descriptor.MessageTypes[0];
        internal__static_CrustyBike_Messages_MessageFromDevice__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CrustyBike.Messages.MessageFromDevice, global::CrustyBike.Messages.MessageFromDevice.Builder>(internal__static_CrustyBike_Messages_MessageFromDevice__Descriptor,
                new string[] { "RegistrationId", "PurchasePartIds", });
        internal__static_CrustyBike_Messages_MessageToDevice__Descriptor = Descriptor.MessageTypes[1];
        internal__static_CrustyBike_Messages_MessageToDevice__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CrustyBike.Messages.MessageToDevice, global::CrustyBike.Messages.MessageToDevice.Builder>(internal__static_CrustyBike_Messages_MessageToDevice__Descriptor,
                new string[] { "PartCategories", });
        internal__static_CrustyBike_Messages_PartCategory__Descriptor = Descriptor.MessageTypes[2];
        internal__static_CrustyBike_Messages_PartCategory__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CrustyBike.Messages.PartCategory, global::CrustyBike.Messages.PartCategory.Builder>(internal__static_CrustyBike_Messages_PartCategory__Descriptor,
                new string[] { "Name", "Parts", });
        internal__static_CrustyBike_Messages_Part__Descriptor = Descriptor.MessageTypes[3];
        internal__static_CrustyBike_Messages_Part__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CrustyBike.Messages.Part, global::CrustyBike.Messages.Part.Builder>(internal__static_CrustyBike_Messages_Part__Descriptor,
                new string[] { "Id", "Name", "Description", "IsAvailable", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MessageFromDevice : pb::GeneratedMessage<MessageFromDevice, MessageFromDevice.Builder> {
    private MessageFromDevice() { }
    private static readonly MessageFromDevice defaultInstance = new MessageFromDevice().MakeReadOnly();
    private static readonly string[] _messageFromDeviceFieldNames = new string[] { "purchase_part_ids", "registration_id" };
    private static readonly uint[] _messageFromDeviceFieldTags = new uint[] { 16, 10 };
    public static MessageFromDevice DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MessageFromDevice DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MessageFromDevice ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CrustyBike.Messages.DeviceMessages.internal__static_CrustyBike_Messages_MessageFromDevice__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MessageFromDevice, MessageFromDevice.Builder> InternalFieldAccessors {
      get { return global::CrustyBike.Messages.DeviceMessages.internal__static_CrustyBike_Messages_MessageFromDevice__FieldAccessorTable; }
    }
    
    public const int RegistrationIdFieldNumber = 1;
    private bool hasRegistrationId;
    private string registrationId_ = "";
    public bool HasRegistrationId {
      get { return hasRegistrationId; }
    }
    public string RegistrationId {
      get { return registrationId_; }
    }
    
    public const int PurchasePartIdsFieldNumber = 2;
    private pbc::PopsicleList<int> purchasePartIds_ = new pbc::PopsicleList<int>();
    public scg::IList<int> PurchasePartIdsList {
      get { return pbc::Lists.AsReadOnly(purchasePartIds_); }
    }
    public int PurchasePartIdsCount {
      get { return purchasePartIds_.Count; }
    }
    public int GetPurchasePartIds(int index) {
      return purchasePartIds_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _messageFromDeviceFieldNames;
      if (hasRegistrationId) {
        output.WriteString(1, field_names[1], RegistrationId);
      }
      if (purchasePartIds_.Count > 0) {
        output.WriteInt32Array(2, field_names[0], purchasePartIds_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRegistrationId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, RegistrationId);
      }
      {
        int dataSize = 0;
        foreach (int element in PurchasePartIdsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * purchasePartIds_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static MessageFromDevice ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MessageFromDevice ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MessageFromDevice ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MessageFromDevice ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MessageFromDevice ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MessageFromDevice ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MessageFromDevice ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MessageFromDevice ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MessageFromDevice ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MessageFromDevice ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MessageFromDevice MakeReadOnly() {
      purchasePartIds_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MessageFromDevice prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MessageFromDevice, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MessageFromDevice cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MessageFromDevice result;
      
      private MessageFromDevice PrepareBuilder() {
        if (resultIsReadOnly) {
          MessageFromDevice original = result;
          result = new MessageFromDevice();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MessageFromDevice MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CrustyBike.Messages.MessageFromDevice.Descriptor; }
      }
      
      public override MessageFromDevice DefaultInstanceForType {
        get { return global::CrustyBike.Messages.MessageFromDevice.DefaultInstance; }
      }
      
      public override MessageFromDevice BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MessageFromDevice) {
          return MergeFrom((MessageFromDevice) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MessageFromDevice other) {
        if (other == global::CrustyBike.Messages.MessageFromDevice.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRegistrationId) {
          RegistrationId = other.RegistrationId;
        }
        if (other.purchasePartIds_.Count != 0) {
          result.purchasePartIds_.Add(other.purchasePartIds_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_messageFromDeviceFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _messageFromDeviceFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasRegistrationId = input.ReadString(ref result.registrationId_);
              break;
            }
            case 18:
            case 16: {
              input.ReadInt32Array(tag, field_name, result.purchasePartIds_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRegistrationId {
        get { return result.hasRegistrationId; }
      }
      public string RegistrationId {
        get { return result.RegistrationId; }
        set { SetRegistrationId(value); }
      }
      public Builder SetRegistrationId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRegistrationId = true;
        result.registrationId_ = value;
        return this;
      }
      public Builder ClearRegistrationId() {
        PrepareBuilder();
        result.hasRegistrationId = false;
        result.registrationId_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<int> PurchasePartIdsList {
        get { return PrepareBuilder().purchasePartIds_; }
      }
      public int PurchasePartIdsCount {
        get { return result.PurchasePartIdsCount; }
      }
      public int GetPurchasePartIds(int index) {
        return result.GetPurchasePartIds(index);
      }
      public Builder SetPurchasePartIds(int index, int value) {
        PrepareBuilder();
        result.purchasePartIds_[index] = value;
        return this;
      }
      public Builder AddPurchasePartIds(int value) {
        PrepareBuilder();
        result.purchasePartIds_.Add(value);
        return this;
      }
      public Builder AddRangePurchasePartIds(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.purchasePartIds_.Add(values);
        return this;
      }
      public Builder ClearPurchasePartIds() {
        PrepareBuilder();
        result.purchasePartIds_.Clear();
        return this;
      }
    }
    static MessageFromDevice() {
      object.ReferenceEquals(global::CrustyBike.Messages.DeviceMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MessageToDevice : pb::GeneratedMessage<MessageToDevice, MessageToDevice.Builder> {
    private MessageToDevice() { }
    private static readonly MessageToDevice defaultInstance = new MessageToDevice().MakeReadOnly();
    private static readonly string[] _messageToDeviceFieldNames = new string[] { "part_categories" };
    private static readonly uint[] _messageToDeviceFieldTags = new uint[] { 10 };
    public static MessageToDevice DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MessageToDevice DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MessageToDevice ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CrustyBike.Messages.DeviceMessages.internal__static_CrustyBike_Messages_MessageToDevice__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MessageToDevice, MessageToDevice.Builder> InternalFieldAccessors {
      get { return global::CrustyBike.Messages.DeviceMessages.internal__static_CrustyBike_Messages_MessageToDevice__FieldAccessorTable; }
    }
    
    public const int PartCategoriesFieldNumber = 1;
    private pbc::PopsicleList<global::CrustyBike.Messages.PartCategory> partCategories_ = new pbc::PopsicleList<global::CrustyBike.Messages.PartCategory>();
    public scg::IList<global::CrustyBike.Messages.PartCategory> PartCategoriesList {
      get { return partCategories_; }
    }
    public int PartCategoriesCount {
      get { return partCategories_.Count; }
    }
    public global::CrustyBike.Messages.PartCategory GetPartCategories(int index) {
      return partCategories_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::CrustyBike.Messages.PartCategory element in PartCategoriesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _messageToDeviceFieldNames;
      if (partCategories_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], partCategories_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::CrustyBike.Messages.PartCategory element in PartCategoriesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static MessageToDevice ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MessageToDevice ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MessageToDevice ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MessageToDevice ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MessageToDevice ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MessageToDevice ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MessageToDevice ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MessageToDevice ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MessageToDevice ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MessageToDevice ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MessageToDevice MakeReadOnly() {
      partCategories_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MessageToDevice prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MessageToDevice, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MessageToDevice cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MessageToDevice result;
      
      private MessageToDevice PrepareBuilder() {
        if (resultIsReadOnly) {
          MessageToDevice original = result;
          result = new MessageToDevice();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MessageToDevice MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CrustyBike.Messages.MessageToDevice.Descriptor; }
      }
      
      public override MessageToDevice DefaultInstanceForType {
        get { return global::CrustyBike.Messages.MessageToDevice.DefaultInstance; }
      }
      
      public override MessageToDevice BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MessageToDevice) {
          return MergeFrom((MessageToDevice) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MessageToDevice other) {
        if (other == global::CrustyBike.Messages.MessageToDevice.DefaultInstance) return this;
        PrepareBuilder();
        if (other.partCategories_.Count != 0) {
          result.partCategories_.Add(other.partCategories_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_messageToDeviceFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _messageToDeviceFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.partCategories_, global::CrustyBike.Messages.PartCategory.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::CrustyBike.Messages.PartCategory> PartCategoriesList {
        get { return PrepareBuilder().partCategories_; }
      }
      public int PartCategoriesCount {
        get { return result.PartCategoriesCount; }
      }
      public global::CrustyBike.Messages.PartCategory GetPartCategories(int index) {
        return result.GetPartCategories(index);
      }
      public Builder SetPartCategories(int index, global::CrustyBike.Messages.PartCategory value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.partCategories_[index] = value;
        return this;
      }
      public Builder SetPartCategories(int index, global::CrustyBike.Messages.PartCategory.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.partCategories_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddPartCategories(global::CrustyBike.Messages.PartCategory value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.partCategories_.Add(value);
        return this;
      }
      public Builder AddPartCategories(global::CrustyBike.Messages.PartCategory.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.partCategories_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangePartCategories(scg::IEnumerable<global::CrustyBike.Messages.PartCategory> values) {
        PrepareBuilder();
        result.partCategories_.Add(values);
        return this;
      }
      public Builder ClearPartCategories() {
        PrepareBuilder();
        result.partCategories_.Clear();
        return this;
      }
    }
    static MessageToDevice() {
      object.ReferenceEquals(global::CrustyBike.Messages.DeviceMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PartCategory : pb::GeneratedMessage<PartCategory, PartCategory.Builder> {
    private PartCategory() { }
    private static readonly PartCategory defaultInstance = new PartCategory().MakeReadOnly();
    private static readonly string[] _partCategoryFieldNames = new string[] { "name", "parts" };
    private static readonly uint[] _partCategoryFieldTags = new uint[] { 10, 18 };
    public static PartCategory DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PartCategory DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PartCategory ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CrustyBike.Messages.DeviceMessages.internal__static_CrustyBike_Messages_PartCategory__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PartCategory, PartCategory.Builder> InternalFieldAccessors {
      get { return global::CrustyBike.Messages.DeviceMessages.internal__static_CrustyBike_Messages_PartCategory__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int PartsFieldNumber = 2;
    private pbc::PopsicleList<global::CrustyBike.Messages.Part> parts_ = new pbc::PopsicleList<global::CrustyBike.Messages.Part>();
    public scg::IList<global::CrustyBike.Messages.Part> PartsList {
      get { return parts_; }
    }
    public int PartsCount {
      get { return parts_.Count; }
    }
    public global::CrustyBike.Messages.Part GetParts(int index) {
      return parts_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        foreach (global::CrustyBike.Messages.Part element in PartsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _partCategoryFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[0], Name);
      }
      if (parts_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], parts_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Name);
      }
      foreach (global::CrustyBike.Messages.Part element in PartsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static PartCategory ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PartCategory ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PartCategory ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PartCategory ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PartCategory ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PartCategory ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PartCategory ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PartCategory ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PartCategory ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PartCategory ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PartCategory MakeReadOnly() {
      parts_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PartCategory prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<PartCategory, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PartCategory cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PartCategory result;
      
      private PartCategory PrepareBuilder() {
        if (resultIsReadOnly) {
          PartCategory original = result;
          result = new PartCategory();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PartCategory MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CrustyBike.Messages.PartCategory.Descriptor; }
      }
      
      public override PartCategory DefaultInstanceForType {
        get { return global::CrustyBike.Messages.PartCategory.DefaultInstance; }
      }
      
      public override PartCategory BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PartCategory) {
          return MergeFrom((PartCategory) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PartCategory other) {
        if (other == global::CrustyBike.Messages.PartCategory.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.parts_.Count != 0) {
          result.parts_.Add(other.parts_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_partCategoryFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _partCategoryFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.parts_, global::CrustyBike.Messages.Part.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::CrustyBike.Messages.Part> PartsList {
        get { return PrepareBuilder().parts_; }
      }
      public int PartsCount {
        get { return result.PartsCount; }
      }
      public global::CrustyBike.Messages.Part GetParts(int index) {
        return result.GetParts(index);
      }
      public Builder SetParts(int index, global::CrustyBike.Messages.Part value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.parts_[index] = value;
        return this;
      }
      public Builder SetParts(int index, global::CrustyBike.Messages.Part.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.parts_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddParts(global::CrustyBike.Messages.Part value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.parts_.Add(value);
        return this;
      }
      public Builder AddParts(global::CrustyBike.Messages.Part.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.parts_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeParts(scg::IEnumerable<global::CrustyBike.Messages.Part> values) {
        PrepareBuilder();
        result.parts_.Add(values);
        return this;
      }
      public Builder ClearParts() {
        PrepareBuilder();
        result.parts_.Clear();
        return this;
      }
    }
    static PartCategory() {
      object.ReferenceEquals(global::CrustyBike.Messages.DeviceMessages.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Part : pb::GeneratedMessage<Part, Part.Builder> {
    private Part() { }
    private static readonly Part defaultInstance = new Part().MakeReadOnly();
    private static readonly string[] _partFieldNames = new string[] { "description", "id", "is_available", "name" };
    private static readonly uint[] _partFieldTags = new uint[] { 26, 8, 32, 18 };
    public static Part DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Part DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Part ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::CrustyBike.Messages.DeviceMessages.internal__static_CrustyBike_Messages_Part__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Part, Part.Builder> InternalFieldAccessors {
      get { return global::CrustyBike.Messages.DeviceMessages.internal__static_CrustyBike_Messages_Part__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int DescriptionFieldNumber = 3;
    private bool hasDescription;
    private string description_ = "";
    public bool HasDescription {
      get { return hasDescription; }
    }
    public string Description {
      get { return description_; }
    }
    
    public const int IsAvailableFieldNumber = 4;
    private bool hasIsAvailable;
    private bool isAvailable_;
    public bool HasIsAvailable {
      get { return hasIsAvailable; }
    }
    public bool IsAvailable {
      get { return isAvailable_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _partFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[1], Id);
      }
      if (hasName) {
        output.WriteString(2, field_names[3], Name);
      }
      if (hasDescription) {
        output.WriteString(3, field_names[0], Description);
      }
      if (hasIsAvailable) {
        output.WriteBool(4, field_names[2], IsAvailable);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (hasDescription) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Description);
      }
      if (hasIsAvailable) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, IsAvailable);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static Part ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Part ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Part ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Part ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Part ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Part ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Part ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Part ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Part ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Part ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Part MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Part prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Part, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Part cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Part result;
      
      private Part PrepareBuilder() {
        if (resultIsReadOnly) {
          Part original = result;
          result = new Part();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Part MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::CrustyBike.Messages.Part.Descriptor; }
      }
      
      public override Part DefaultInstanceForType {
        get { return global::CrustyBike.Messages.Part.DefaultInstance; }
      }
      
      public override Part BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Part) {
          return MergeFrom((Part) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Part other) {
        if (other == global::CrustyBike.Messages.Part.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasDescription) {
          Description = other.Description;
        }
        if (other.HasIsAvailable) {
          IsAvailable = other.IsAvailable;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_partFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _partFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 26: {
              result.hasDescription = input.ReadString(ref result.description_);
              break;
            }
            case 32: {
              result.hasIsAvailable = input.ReadBool(ref result.isAvailable_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasDescription {
        get { return result.hasDescription; }
      }
      public string Description {
        get { return result.Description; }
        set { SetDescription(value); }
      }
      public Builder SetDescription(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDescription = true;
        result.description_ = value;
        return this;
      }
      public Builder ClearDescription() {
        PrepareBuilder();
        result.hasDescription = false;
        result.description_ = "";
        return this;
      }
      
      public bool HasIsAvailable {
        get { return result.hasIsAvailable; }
      }
      public bool IsAvailable {
        get { return result.IsAvailable; }
        set { SetIsAvailable(value); }
      }
      public Builder SetIsAvailable(bool value) {
        PrepareBuilder();
        result.hasIsAvailable = true;
        result.isAvailable_ = value;
        return this;
      }
      public Builder ClearIsAvailable() {
        PrepareBuilder();
        result.hasIsAvailable = false;
        result.isAvailable_ = false;
        return this;
      }
    }
    static Part() {
      object.ReferenceEquals(global::CrustyBike.Messages.DeviceMessages.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
